#include <iostream>
#include "RemakeAVL.h"
//#include "AVL.h"
#define arr arr8
using namespace std;
#include <random>

int main()
{
	AVLtree<int>* avl = new AVLtree<int>();
	int arr1[] = { 507, 303, 441, 387, 821, 486, 689, 763, 73, 228, 649, 341, 543, 294, 736, 186, 780, 176, 906, 596, 399, 269, 149, 890, 452, 589, 652, 746, 265, 302, 611, 675, 197, 846, 251, 403, 33, 284, 517, 559, 30, 942, 208, 605, 29, 137, 484, 164, 776, 249, 453, 752, 440, 612, 363, 895, 110, 897, 307, 462, 614, 615, 591, 532, 379, 590, 527, 382, 806, 999, 931, 769, 28, 316, 593, 83, 911, 557, 364, 616, 983, 200, 451, 99, 24, 797, 132, 345, 163, 304, 986, 225, 754, 996, 868, 954, 348, 697, 560, 683, 412, 676, 779, 940, 594, 6, 572, 887, 504, 136, 8, 729, 975, 629, 787, 438, 113, 902, 173, 565, 684, 353, 300, 108, 508, 782, 349, 585, 342, 698, 713, 301, 583, 317, 309, 459, 84, 535, 66, 686, 244, 678, 460, 85, 320, 841, 656, 925, 12, 401, 157, 970, 935, 767, 1000, 434, 7, 358, 888, 261, 922, 876, 235, 405, 69, 159, 850, 470, 191, 639, 151, 390, 121, 606, 260, 308, 75, 859, 227, 966, 431, 636, 397, 474, 424, 962, 189, 914, 801, 298, 482, 419, 823, 205, 745, 215, 936, 490, 206, 533, 799, 581, 987, 509, 951, 836, 603, 716, 851, 41, 574, 433, 847, 180, 958, 55, 131, 997, 94, 635, 633, 49, 267, 100, 45, 732, 953, 874, 241, 848, 730, 854, 361, 185, 410, 580, 735, 621, 428, 817, 466, 545, 784, 476, 695, 463, 483, 373, 126, 723, 891, 709, 965, 619, 442, 642, 862, 772, 445, 456, 115, 209, 223, 871, 739, 392, 378, 795, 824, 366, 791, 446, 471, 903, 668, 650, 210, 21, 168, 995, 380, 230, 758, 553, 853, 913, 829, 929, 109, 601, 22, 981, 506, 628, 58, 194, 333, 748, 511, 245, 337, 878, 478, 72, 724, 587, 550, 395, 845, 520, 712, 945, 327, 646, 641, 407, 688, 957, 14, 158, 124, 571, 105, 972, 351, 312, 934, 866, 610, 376, 638, 749, 76, 70, 4, 513, 429, 277, 980, 625, 926, 256, 2, 703, 988, 175, 184, 742, 422, 961, 237, 221, 775, 292, 59, 487, 181, 909, 718, 977, 259, 994, 933, 421, 811, 705, 536, 492, 503, 757, 773, 872, 89, 278, 340, 5, 381, 814, 617, 497, 3, 898, 518, 122, 556, 651, 427, 39, 858, 274, 204, 927, 104, 287, 917, 468, 789, 154, 505, 579, 884, 220, 840, 551, 247, 618, 819, 150, 880, 905, 528, 722, 253, 920, 721, 95, 389, 388, 264, 910, 756, 766, 869, 293, 238, 870, 809, 613, 402, 881, 165, 262, 654, 359, 65, 969, 480, 968, 19, 648, 93, 816, 774, 488, 946, 971, 838, 52, 491, 808, 547, 523, 281, 502, 865, 394, 892, 135, 88, 335, 803, 530, 600, 196, 233, 203, 662, 479, 106, 794, 538, 141, 810, 548, 741, 79, 950, 731, 174, 306, 98, 877, 812, 710, 169, 393, 907, 529, 979, 331, 321, 46, 531, 239, 993, 645, 461, 750, 883, 190, 63, 465, 667, 156, 329, 162, 334, 146, 11, 566, 867, 155, 647, 738, 901, 673, 377, 339, 369, 187, 537, 408, 266, 16, 310, 86, 567, 273, 941, 372, 37, 658, 134, 733, 423, 338, 242, 515, 276, 568, 796, 179, 31, 569, 546, 879, 255, 198, 414, 352, 558, 687, 455, 827, 254, 832, 514, 328, 96, 955, 160, 595, 549, 500, 416, 119, 112, 275, 42, 991, 967, 899, 218, 319, 125, 40, 171, 290, 706, 148, 765, 272, 820, 330, 544, 177, 495, 805, 828, 715, 711, 863, 948, 622, 680, 449, 904, 315, 188, 74, 681, 226, 627, 751, 285, 411, 699, 834, 467, 20, 956, 554, 493, 608, 561, 856, 666, 932, 919, 963, 630, 103, 10, 13, 219, 944, 102, 521, 592, 413, 91, 324, 444, 15, 207, 783, 172, 240, 464, 949, 761, 229, 192, 343, 984, 893, 426, 943, 989, 982, 297, 792, 889, 702, 539, 436, 231, 435, 18, 540, 38, 992, 357, 418, 677, 123, 541, 978, 631, 107, 288, 417, 314, 178, 990, 626, 234, 634, 60, 270, 437, 623, 577, 602, 161, 217, 68, 246, 875, 691, 923, 498, 268, 279, 232, 374, 54, 323, 475, 947, 447, 450, 807, 133, 672, 326, 586, 481, 213, 473, 671, 81, 510, 212, 344, 291, 128, 420, 454, 833, 885, 563, 582, 737, 734, 9, 937, 409, 286, 356, 153, 313, 976, 296, 129, 720, 798, 211, 120, 47, 826, 250, 607, 584, 432, 714, 398, 305, 48, 400, 764, 701, 653, 494, 728, 222, 620, 458, 743, 609, 138, 404, 959, 50, 143, 147, 92, 368, 659, 570, 860, 386, 283, 362, 522, 519, 62, 97, 295, 501, 985, 391, 804, 727, 864, 857, 224, 152, 472, 332, 624, 252, 921, 882, 56, 837, 257, 457, 637, 248, 822, 311, 693, 516, 195, 170, 25, 759, 939, 852, 477, 597, 576, 336, 299, 130, 53, 924, 542, 700, 813, 664, 512, 578, 726, 193, 271, 370, 71, 670, 35, 406, 32, 167, 740, 665, 886, 127, 44, 778, 101, 117, 385, 655, 918, 964, 243, 873, 199, 802, 781, 768, 747, 139, 952, 928, 26, 90, 383, 322, 696, 263, 430, 708, 80, 145, 760, 282, 64, 469, 23, 790, 753, 142, 960, 998, 166, 1, 325, 499, 67, 111, 350, 396, 140, 415, 439, 588, 526, 704, 360, 489, 604, 43, 785, 973, 27, 915, 236, 36 };
	int arr6[] = { 4, 10, 14, 18, 20, 30, 32, 33, 34, 35, 39, 45, 50, 60, 68, 72, 74, 89, 93, 95 };
	int arr7[] = { 7, 14, 15, 27, 29, 126, 138, 140, 143, 155, 176, 180, 213, 217, 226, 260, 262, 289, 293, 303, 307, 314, 324, 326, 328, 332, 356, 365, 369, 372, 374, 381, 387, 400, 407, 416, 425, 462, 491, 495, 496, 509, 512, 524, 542, 547, 553, 555, 559, 560, 568, 629, 661, 671, 679, 690, 712, 722, 732, 733, 761, 765, 766, 770, 781, 790, 793, 797, 810, 812, 827, 840, 850, 860, 863, 864, 866, 869, 882, 883, 888, 901, 904, 916, 918, 921, 926, 934, 936, 942, 943, 955, 961, 964, 970, 977, 985, 988, 994, 998 };
	int arr8[] = { 3, 9, 18, 50, 53, 58, 62, 77, 85, 87 };
	int arr_size = sizeof(arr)/sizeof(arr[0]);
	for (int i = 0; i < arr_size; i++)
	{
		avl->add(arr[i]);
	}
	
	//cout << "#Nodes: " << avl->countNode()<<endl;
	cout << "Height: " << avl->getHeight()<<endl;
	//cout<<"Max value div by 3: "<<*avl->search_max([](node<int>* x,auto p)
	//{
	//	if (x == NULL) return false;
	//	return x->data % 3 == 0;
	//})<<endl;
	//cout<<"Min value div by 3: "<<*avl->search_min([](node<int>* x, auto p)
	//	{
	//		if (x == NULL) return false;
	//		return x->data % 3 == 0;
	//	})<<endl;
	cout << "PreOrder: ";
	avl->traverse_preOrder([](node<int>* x, auto p) {
		cout << x->data << ' ';
		}); cout << endl;
	cout << "InOrder: ";
	avl->traverse_inOrder([](node<int>* x, auto p) {
		cout << x->data << ' ';
		}); cout << endl;
	//
	//cout << "After removal" << endl;
	//for (int i = 0; i < arr_size; i++)
	//{
	//	cout << i << ' ';
	//	int x = rand() % (arr_size);
	//	avl->remove(x);
	//}
	//cout << "InOrder: ";
	//avl->traverse_inOrder([](node<int>* x, auto p) {
	//	cout << x->data << ' ';
	//	}); cout << endl;
	//cout << "PostOrder: ";
	//avl->traverse_postOrder([](node<int>* x, auto p) {
	//	cout << x->data << ' ';
	//	}); cout << endl;
	//avl->print();
	return 0;
}